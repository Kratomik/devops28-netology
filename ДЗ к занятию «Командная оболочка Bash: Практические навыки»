# Домашнее задание к занятию «Командная оболочка Bash: Практические навыки»

### Цель задания

В результате выполнения задания вы:

* познакомитесь с командной оболочкой Bash;
* используете синтаксис bash-скриптов;
* узнаете, как написать скрипт в файл так, чтобы он мог выполниться с параметрами и без.


### Чеклист готовности к домашнему заданию

1. У вас настроена виртуальная машина, контейнер или установлена гостевая ОС семейств Linux, Unix, MacOS.
2. Установлен Bash.


### Инструкция к заданию

1. Скопируйте в свой .md-файл содержимое этого файла, исходники можно посмотреть [здесь](https://raw.githubusercontent.com/netology-code/sysadm-homeworks/devsys10/04-script-01-bash/README.md).
2. Заполните недостающие части документа решением задач — заменяйте `???`, остальное в шаблоне не меняйте, чтобы не сломать форматирование текста, подсветку синтаксиса. Вместо логов можно вставить скриншоты по желанию.
3. Для проверки домашнего задания в личном кабинете прикрепите и отправьте ссылку на решение в виде md-файла в вашем репозитории.
4. Любые вопросы по выполнению заданий задавайте в чате учебной группы или в разделе «Вопросы по заданию» в личном кабинете.

### Дополнительные материалы

1. [Полезные ссылки для модуля «Скриптовые языки и языки разметки».](https://github.com/netology-code/sysadm-homeworks/tree/devsys10/04-script-03-yaml/additional-info)

------

## Задание 1

Переменной c будет присвоено значение "a+b" т.к. обращение к переменным не идет, это просто строковое значение. Переменной d будет присвоено значение "1+2" т.к. из-за знака "+" переменные a и b интерпретируются как строки. Переменной e будет присвоено значение "3" т.к. конструкция $(( )) указывает что это арифметическая операция.


## Задание 2
Есть скрипт
```bash
while ((1==1)
do
	curl https://localhost:4757
	if (($? != 0))
	then
		date >> curl.log
	fi
done
```

### Ваши скрипты:

2.1 В первую очередь в скрипте есть ошибка которая не дает ему выполниться. Нет закрывающей скобки в операторе while. Исправленный вариант:
```bash
while ((1==1))
  do
  curl https://localhost:4757
  if (($? != 0))
  then
    date >> curl.log
  fi
done
```
2.2 В задаче написано что при работе скрипта потребяется место на диске. Место потребляется только если проблема продолжается. Если нужно знать только последнюю отметку времени то можно модифицировать скрипт и заменить оператор добавления текста на замену текста:
```bash
while ((1==1))
  do
  curl https://localhost:4757
  if (($? != 0))
  then
    date > curl.log
  fi
done
```
2.3 Если нам нужно чтобы скрипт завершал свою работу после того как пробелма пропала, можно доработать его добавив выход по успешному выполнению curl:
```bash
while ((1==1))
  do
  curl https://localhost:4757
  if (($? != 0))
  then
    date >> curl.log
  else
    break
  fi
done
```
## Задание 3

Скрипт проверки доступности хостов по порту 80
### Ваш скрипт:
```bash
#!/bin/bash

logfile="out.log"
port=80
hosts=("192.168.0.1" "173.194.222.113" "87.250.250.242")

for i in {0..4}
do
  for host in ${hosts[@]}
  do
    nc -z -w1 $host $port
    rc=$?
    if (($rc == 0))
    then
      echo `date` $host OK >> $logfile
    else
      echo `date` $host ERROR >> $logfile
    fi
  done
done
```
## Задание 4

Необходимо дописать скрипт из предыдущего задания так, чтобы он выполнялся до тех пор, пока один из узлов не окажется недоступным. Если любой из узлов недоступен — IP этого узла пишется в файл error, скрипт прерывается.

### Ваш скрипт:

```bash
#!/bin/bash

logfile="out.log"
errfile="error"
port=80
hosts=("192.168.0.1" "173.194.222.113" "87.250.250.242")

for i in {0..4}
do
  for host in ${hosts[@]}
  do
    nc -z -w1 $host $port
    rc=$?
    if (($rc == 0))
    then
      echo `date` $host OK >> $logfile
    else
      echo `date` $host ERROR >> $logfile
      echo $host >> $errfile
      exit 1
    fi
  done
done
```

---

## Задание со звёздочкой* 

Это самостоятельное задание, его выполнение необязательно.
____

Мы хотим, чтобы у нас были красивые сообщения для коммитов в репозиторий. Для этого нужно написать локальный хук для Git, который будет проверять, что сообщение в коммите содержит код текущего задания в квадратных скобках, и количество символов в сообщении не превышает 30. Пример сообщения: \[04-script-01-bash\] сломал хук.

### Ваш скрипт:

```bash
#!/bin/bash

template="\[.*\]"
commitfile=$1
maxlength=30

length=`cat $commitfile | wc -c`
(grep -Eq $template $commitfile) && match=1 || match=0

if (($match == 0))
then
  echo >&2 Commit message not match template.
  err=1
fi

if (("$length" > "$maxlength"))
then
  echo >&2 Commit message too long. Max length $maxlength.
  err=1
fi

if ((err == 1))
then
  exit 1
fi
```
